import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:io';
import 'package:image_picker/image_picker.dart';

class AddNotePage extends StatefulWidget {
  @override
  _AddNotePageState createState() => _AddNotePageState();
}

class _AddNotePageState extends State<AddNotePage> {
  final TextEditingController _diseaseController = TextEditingController();
  final TextEditingController _houseController = TextEditingController();
  final TextEditingController _plotController = TextEditingController();
  final TextEditingController _temperatureController = TextEditingController();
  final TextEditingController _humidityController = TextEditingController();
  final TextEditingController _soilMoistureController = TextEditingController();
  File? pickedImage;

  DateTime? selectedDate; // เพิ่มตัวแปรเก็บวันที่ที่เลือก

  void _addNote() {
    final String day = selectedDate != null ? selectedDate.toString() : '';
    final String disease = _diseaseController.text.trim();
    final String house = _houseController.text.trim();
    final String plot = _plotController.text.trim();
    final String temperature = _temperatureController.text.trim();
    final String humidity = _humidityController.text.trim();
    final String soil_moisture = _soilMoistureController.text.trim();
    if (day.isNotEmpty &&
        disease.isNotEmpty &&
        house.isNotEmpty &&
        plot.isNotEmpty &&
        temperature.isNotEmpty &&
        humidity.isNotEmpty &&
        soil_moisture.isNotEmpty) {
      FirebaseFirestore.instance
          .collection('user_notes')
          .doc('YOUR_USER_UID')
          .collection('notes')
          .add({
        'day': day,
        'disease': disease,
        'img': pickedImage != null ? pickedImage!.path : '',
        'house': house,
        'plot': plot,
        'temperature': temperature,
        'humidity': humidity,
        'soil_moisture': soil_moisture,
      }).then((_) {
        Navigator.pop(context);
      }).catchError((error) {
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: Text('Error'),
              content: Text('An error occurred while adding the note.'),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: Text('OK'),
                ),
              ],
            );
          },
        );
      });
    }
  }

  Future<void> _pickImage() async {
    final pickedFile =
        await ImagePicker().pickImage(source: ImageSource.gallery);

    if (pickedFile != null) {
      setState(() {
        pickedImage = File(pickedFile.path);
      });
    }
  }

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: selectedDate ?? DateTime.now(),
      firstDate: DateTime(2000),
      lastDate: DateTime(2101),
    );

    if (picked != null) {
      setState(() {
        selectedDate = picked;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('บันทึกรายวัน'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            children: [
              ListTile(
                title: Text('ช่วงเวลา'),
                subtitle: Text(selectedDate != null
                    ? "${selectedDate!.toLocal()}".split(' ')[0]
                    : 'เลือกวันที่'),
                trailing: Icon(Icons.keyboard_arrow_down),
                onTap: () {
                  _selectDate(context);
                },
              ),
              TextField(
                controller: _diseaseController,
                decoration: InputDecoration(labelText: 'โรคที่พบ'),
              ),
              if (pickedImage != null) Image.file(pickedImage!),
              ElevatedButton(
                onPressed: () async {
                  final action = await _showImageSourceSelectionDialog();
                  if (action == 'Gallery') {
                    _pickImage();
                  } else if (action == 'Camera') {
                    _takePicture();
                  }
                },
                child: Text('เลือกรูปภาพหรือถ่ายภาพ'),
              ),
              TextField(
                controller: _houseController,
                decoration: InputDecoration(labelText: 'โรงเรือนที่'),
              ),
              TextField(
                controller: _plotController,
                decoration: InputDecoration(labelText: 'แปลงผักที่'),
              ),
              TextField(
                controller: _temperatureController,
                decoration: InputDecoration(labelText: 'อุณหภูมิ (°C)'),
              ),
              TextField(
                controller: _humidityController,
                decoration: InputDecoration(labelText: 'ความชื้น (%)'),
              ),
              TextField(
                controller: _soilMoistureController,
                decoration: InputDecoration(labelText: 'ความชื้นในดิน (%)'),
              ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: _addNote,
                child: Text('บันทึก'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Future<String?> _showImageSourceSelectionDialog() async {
    return showDialog<String>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('เลือกแหล่งที่มาของภาพ'),
          content: SingleChildScrollView(
            child: ListBody(
              children: <Widget>[
                GestureDetector(
                  onTap: () {
                    Navigator.of(context).pop('Gallery');
                  },
                  child: ListTile(
                    leading: Icon(Icons.photo),
                    title: Text('เลือกจากแกลเลอรี่'),
                  ),
                ),
                GestureDetector(
                  onTap: () {
                    Navigator.of(context).pop('Camera');
                  },
                  child: ListTile(
                    leading: Icon(Icons.camera),
                    title: Text('กล้อง'),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Future<void> _takePicture() async {
    final pickedFile =
        await ImagePicker().pickImage(source: ImageSource.camera);

    if (pickedFile != null) {
      setState(() {
        pickedImage = File(pickedFile.path);
      });
    }
  }
}
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:iotapp/main.dart';

class SignUpPage extends StatefulWidget {
  final VoidCallback callToSignIn;
  const SignUpPage({
    Key? key,
    required this.callToSignIn, required Null Function() callToSingIn, required Null Function() callToSignInFunction,
  }) : super(key: key);

  @override
  _SignUpPageState createState() => _SignUpPageState();
}

class _SignUpPageState extends State<SignUpPage> {
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _password2Controller = TextEditingController();
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _phoneNumberController = TextEditingController();
  String _errorMessage = '';

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    _password2Controller.dispose();
    _nameController.dispose();
    _phoneNumberController.dispose();
    super.dispose();
  }

  Future<void> _handleSignUp() async {
    if (_passwordController.text == _password2Controller.text &&
        _emailController.text.isNotEmpty &&
        _passwordController.text.isNotEmpty) {
      try {
        final UserCredential userCredential =
            await FirebaseAuth.instance.createUserWithEmailAndPassword(
          email: _emailController.text,
          password: _passwordController.text,
        );

        final User user = userCredential.user!;
        final String uid = user.uid;
        final String fullName = _nameController.text;

        await FirebaseFirestore.instance.collection('users').doc(uid).set({
          'IDusers': uid,
          'Full Name': fullName,
          'Phone Number': _phoneNumberController.text,
        });

        // ลงทะเบียนสำเร็จ นำผู้ใช้ไปยังหน้า Login
        Navigator.of(context).pushReplacement(MaterialPageRoute(
          builder: (context) => LoginPage(),
        ));
      } catch (error) {
        setState(() {
          _errorMessage = 'เกิดข้อผิดพลาดในการสมัครสมาชิก: $error';
        });
      }
    } else {
      setState(() {
        _errorMessage = 'รหัสผ่านไม่ตรงกัน หรือ อีเมลหรือรหัสผ่านว่างเปล่า';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('ลงทะเบียน'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            const Text(
              'SignUp',
              style: TextStyle(
                fontSize: 40,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _emailController,
              decoration: const InputDecoration(
                labelText: 'อีเมล',
                labelStyle: TextStyle(
                  fontFamily: 'Montserrat',
                  fontWeight: FontWeight.bold,
                  color: Colors.grey,
                ),
                focusedBorder: UnderlineInputBorder(
                  borderSide: BorderSide(color: Colors.green),
                ),
              ),
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _nameController,
              decoration: const InputDecoration(labelText: 'ชื่อและนามสกุล'),
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _phoneNumberController,
              decoration: const InputDecoration(labelText: 'เบอร์โทร'),
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _passwordController,
              decoration: const InputDecoration(labelText: 'รหัสผ่าน'),
              obscureText: true,
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _password2Controller,
              decoration: const InputDecoration(labelText: 'ยืนยันรหัสผ่าน'),
              obscureText: true,
            ),
            const SizedBox(height: 10),
            ElevatedButton(
              onPressed: _handleSignUp,
              child: const Text(
                'ลงทะเบียน',
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontFamily: 'Montserrat',
                ),
              ),
            ),
            const SizedBox(height: 10),
            Text(
              _errorMessage,
              style: TextStyle(
                color: Colors.red,
                fontSize: 16.0,
              ),
            ),
            const SizedBox(height: 10),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                InkWell(
                  onTap: () {
                    Navigator.of(context).pop();
                  },
                  child: const Text(
                    'กลับ',
                    style: TextStyle(
                      color: Colors.blueGrey,
                      fontFamily: 'Montserrat',
                      fontWeight: FontWeight.bold,
                      decoration: TextDecoration.underline,
                    ),
                  ),
                )
              ],
            )
          ],
        ),
      ),
    );
  }
}

import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

class SignUpPage extends StatefulWidget {
  final VoidCallback callToSignIn;
  const SignUpPage(
      {Key? key,
      required this.callToSignIn,
      required Null Function() callToSingIn})
      : super(key: key);

  @override
  _SignUpPageState createState() => _SignUpPageState();
}

class _SignUpPageState extends State<SignUpPage> {
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _password2Controller = TextEditingController();

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    _password2Controller.dispose();
    super.dispose();
  }

  Future<void> _handleSignUp() async {
    if (_passwordController.text == _password2Controller.text) {
      try {
        final UserCredential userCredential =
            await FirebaseAuth.instance.createUserWithEmailAndPassword(
          email: _emailController.text,
          password: _passwordController.text,
        );

        final User user = userCredential.user!;
        final String uid = user.uid;

        // สร้างเอกสารบน Cloud Firestore ในคอลเลคชัน "users" ด้วย UID ของผู้ใช้ใน Field "IDusers"
        await FirebaseFirestore.instance.collection('users').doc(uid).set({
          'IDusers': uid,
          // สามารถเพิ่มข้อมูลเพิ่มเติมของผู้ใช้ตามความต้องการได้
        });

        // สมัครสมาชิกสำเร็จ คุณสามารถดำเนินการต่อได้ตามต้องการ
        widget.callToSignIn();
      } catch (error) {
        // จัดการข้อผิดพลาดที่เกิดขึ้นในกรณีที่สมัครสมาชิกไม่สำเร็จ
        print('เกิดข้อผิดพลาดในการสมัครสมาชิก: $error');
      }
    } else {
      // Passwords do not match
      print('รหัสผ่านไม่ตรงกัน');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('ลงทะเบียน'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            const Text(
              'SignUp',
              style: TextStyle(
                fontSize: 40,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _emailController,
              decoration: const InputDecoration(
                labelText: 'อีเมล',
                labelStyle: TextStyle(
                  fontFamily: 'Montserrat',
                  fontWeight: FontWeight.bold,
                  color: Colors.grey,
                ),
                focusedBorder: UnderlineInputBorder(
                  borderSide: BorderSide(color: Colors.green),
                ),
              ),
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _passwordController,
              decoration: const InputDecoration(labelText: 'รหัสผ่าน'),
              obscureText: true,
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _password2Controller,
              decoration: const InputDecoration(labelText: 'ยืนยันรหัสผ่าน'),
              obscureText: true,
            ),
            const SizedBox(height: 10),
            ElevatedButton(
              onPressed: _handleSignUp,
              child: const Text(
                'ลงทะเบียน',
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontFamily: 'Montserrat',
                ),
              ),
            ),
            const SizedBox(height: 10),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                InkWell(
                  onTap: () {
                    // กลับไปหน้าล็อกอิน
                    Navigator.of(context).pop();
                  },
                  child: const Text(
                    'กลับ',
                    style: TextStyle(
                      color: Colors.blueGrey,
                      fontFamily: 'Montserrat',
                      fontWeight: FontWeight.bold,
                      decoration: TextDecoration.underline,
                    ),
                  ),
                )
              ],
            )
          ],
        ),
      ),
    );
  }
}
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class ProfilePage extends StatefulWidget {
  final User user;

  ProfilePage({
    required this.user,
    required String fullName,
    required String phoneNumber,
    required String email,
  });

  @override
  _ProfilePageState createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  final ImagePicker _imagePicker = ImagePicker();
  String? _imageUrl;

  Future<void> _uploadImage() async {
    final action = await _showImageSourceSelectionDialog();
    if (action == 'Gallery') {
      _pickImage();
    } else if (action == 'Camera') {
      _takePicture();
    }
  }

  Future<String?> _showImageSourceSelectionDialog() async {
    return showDialog<String>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Choose Image Source'),
          content: SingleChildScrollView(
            child: ListBody(
              children: <Widget>[
                GestureDetector(
                  onTap: () {
                    Navigator.of(context).pop('Gallery');
                  },
                  child: const ListTile(
                    leading: Icon(Icons.photo),
                    title: Text('Choose from Gallery'),
                  ),
                ),
                GestureDetector(
                  onTap: () {
                    Navigator.of(context).pop('Camera');
                  },
                  child: const ListTile(
                    leading: Icon(Icons.camera),
                    title: Text('Take a Photo'),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Future<void> _pickImage() async {
    final pickedFile = await _imagePicker.pickImage(source: ImageSource.gallery);

    if (pickedFile != null) {
      final file = File(pickedFile.path);
      final userId = widget.user.uid;
      final Reference storageRef =
          FirebaseStorage.instance.ref().child('profile_images/$userId.jpg');

      await storageRef.putFile(file);

      final imageUrl = await storageRef.getDownloadURL();
      setState(() {
        _imageUrl = imageUrl;
      });

      // Update the user's profile image URL in Firestore
      await FirebaseFirestore.instance.collection('users').doc(userId).update({
        'profileImageUrl': imageUrl,
      });
    }
  }

  Future<void> _takePicture() async {
    final pickedFile = await _imagePicker.pickImage(source: ImageSource.camera);

    if (pickedFile != null) {
      final file = File(pickedFile.path);
      final userId = widget.user.uid;
      final Reference storageRef =
          FirebaseStorage.instance.ref().child('profile_images/$userId.jpg');

      await storageRef.putFile(file);

      final imageUrl = await storageRef.getDownloadURL();
      setState(() {
        _imageUrl = imageUrl;
      });

      // Update the user's profile image URL in Firestore
      await FirebaseFirestore.instance.collection('users').doc(userId).update({
        'profileImageUrl': imageUrl,
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Your Profile'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            GestureDetector(
              onTap: _uploadImage,
              child: _imageUrl != null
                  ? Image.network(_imageUrl!, width: 200, height: 200)
                  : Container(
                      width: 200,
                      height: 200,
                      color: Colors.grey,
                      child: Icon(
                        Icons.camera_alt,
                        color: Colors.white,
                        size: 80,
                      ),
                    ),
            ),
            const SizedBox(height: 16),
            Text(
              'Tap the image to change your profile picture',
              style: TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 16),
            Text('Name: ${widget.user.displayName ?? ''}', style: TextStyle(fontSize: 20)),
            Text('Email: ${widget.user.email ?? ''}', style: TextStyle(fontSize: 20)),
          ],
        ),
      ),
    );
  }
}
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:iotapp/edit_profile_page.dart';

class ProfilePage extends StatefulWidget {
  final User? user;
  final String fullName;
  final String phoneNumber;
  final String email;

  const ProfilePage({
    Key? key,
    required this.user,
    required this.fullName,
    required this.phoneNumber,
    required this.email,
  }) : super(key: key);

  @override
  _ProfilePageState createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('โปรไฟล์'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Text(
              'ข้อมูลของผู้ใช้',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 20),
            Text(
              'อีเมล: ${widget.user?.email}',
              style: const TextStyle(fontSize: 16),
            ),
            Text(
              'ชื่อ: ${widget.fullName}',
              style: const TextStyle(fontSize: 16),
            ),
            Text(
              'เบอร์โทรศัพท์: ${widget.phoneNumber ?? 'ไม่มี'}',
              style: const TextStyle(fontSize: 16),
            ),
            Text(
              'UID: ${widget.user?.uid}',
              style: const TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 20),
            FutureBuilder<DocumentSnapshot>(
              future: FirebaseFirestore.instance
                  .collection('users')
                  .doc(widget.user?.uid)
                  .get(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return CircularProgressIndicator();
                }
                if (snapshot.hasError) {
                  return Text('เกิดข้อผิดพลาด: ${snapshot.error}');
                }

                final data = snapshot.data;
                final img = data?['img'] as String? ?? '';

                return img.isNotEmpty
                    ? Image.network(
                        img,
                        width: 150,
                        height: 150,
                        fit: BoxFit.cover,
                      )
                    : const SizedBox.shrink();
              },
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => EditProfilePage(
                      user: widget.user,
                      userProfile: {
                        'Full_Name': widget.fullName,
                        'Phone_Number': widget.phoneNumber,
                        'Email': widget.email,
                      },
                    ),
                  ),
                ).then((updatedProfile) {
                  if (updatedProfile != null) {
                    setState(() {
                      widget.fullName = updatedProfile['Full_Name'] ?? '';
                      widget.phoneNumber = updatedProfile['Phone_Number'] ?? '';
                      widget.email = updatedProfile['Email'] ?? '';
                    });
                  }
                });
              },
              child: const Text('แก้ไขโปรไฟล์'),
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:iotapp/edit_profile_page.dart';

class ProfilePage extends StatefulWidget {
  final User? user;

  ProfilePage({required this.user});

  @override
  _ProfilePageState createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  String fullName = '';
  String phoneNumber = '';
  String email = '';
  String img = '';

  @override
  void initState() {
    super.initState();

    fetchProfileData(widget.user).then((data) {
      setState(() {
        fullName = data['Full_Name'] ?? '';
        phoneNumber = data['Phone_Number'] ?? '';
        email = data['Email'] ?? '';
        img = data['img'] ?? '';
      });
    });
  }

  Future<Map<String, dynamic>> fetchProfileData(User? user) async {
    final DocumentSnapshot snapshot = await FirebaseFirestore.instance
        .collection('users')
        .doc(user?.uid)
        .get();

    if (snapshot.exists) {
      final data = snapshot.data() as Map<String, dynamic>;
      return data;
    } else {
      return {};
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('โปรไฟล์'),
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: <Widget>[
              img.isNotEmpty
                  ? CircleAvatar(
                      radius: 75,
                      backgroundImage: NetworkImage(img),
                    )
                  : SizedBox.shrink(),
              SizedBox(height: 20),
              Text(
                'ชื่อ: $fullName',
                style: TextStyle(fontSize: 18),
              ),
              SizedBox(height: 20),
              Text(
                'อีเมล: ${widget.user?.email}',
                style: TextStyle(fontSize: 18),
              ),
              SizedBox(height: 20),
              Text(
                'เบอร์โทรศัพท์: ${phoneNumber ?? 'ไม่มี'}',
                style: TextStyle(fontSize: 18),
              ),
              SizedBox(height: 20),
              Text(
                'UID: ${widget.user?.uid}',
                style: TextStyle(fontSize: 18),
              ),
              SizedBox(height: 20),
              ElevatedButton.icon(
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => EditProfilePage(
                        userProfile: {
                          'Full_Name': fullName,
                          'Phone_Number': phoneNumber,
                          'Email': email,
                          'img': img,
                        },
                        user: widget.user,
                      ),
                    ),
                  ).then((updatedProfile) {
                    if (updatedProfile != null) {
                      setState(() {
                        fullName = updatedProfile['Full_Name'] ?? '';
                        phoneNumber = updatedProfile['Phone_Number'] ?? '';
                        email = updatedProfile['Email'] ?? '';
                        img = updatedProfile['img'] ?? '';
                      });
                    }
                  });
                },
                icon: Icon(
                  Icons.edit,
                  size: 24.0,
                ),
                label: Text('แก้ไขโปรไฟล์'),
                style: ElevatedButton.styleFrom(
                  primary: Colors.blue,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

Row(
  crossAxisAlignment: CrossAxisAlignment.start,
  children: [
    img.isNotEmpty
        ? Container(
            width: 150,
            height: 150,
            decoration: BoxDecoration(
              image: DecorationImage(
                image: NetworkImage(img),
                fit: BoxFit.cover,
              ),
            ),
          )
        : SizedBox(),
    SizedBox(width: 60.0),
    Expanded(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text('วันที่: $formattedDateString'),
          Text('โรคที่พบ: $disease'),
          Text('โรงเรือนที่: $house'),
          Text('แปลงผักที่: $plot'),
          Text('อุณหภูมิ : $temperature (°C)'),
          Text('ความชื้น : $humidity (%)'),
          Text('ความชื้นในดิน : $soilMoisture (%)'),
        ],
      ),
    ),
    PopupMenuButton<String>(
      onSelected: (choice) {
        if (choice == 'edit') {
          // เรียกฟังก์ชันแก้ไขบันทึก
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => EditNotePage(
                userUid: widget.userUid,
                noteId: note.id,
              ),
            ),
          );
        } else if (choice == 'delete') {
          // เรียกฟังก์ชันลบบันทึก
          _deleteNote(note.id);
        }
      },
      itemBuilder: (BuildContext context) {
        return ['edit', 'delete'].map((String choice) {
          return PopupMenuItem<String>(
            value: choice,
            child: Text(choice == 'edit' ? 'แก้ไขบันทึก' : 'ลบบันทึก'),
          );
        }).toList();
      },
    ),
  ],
),
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:iotapp/add_note_page.dart';

import 'package:iotapp/main.dart';
import 'package:iotapp/note_page.dart';
import 'package:iotapp/profile_page.dart';
import 'package:iotapp/video_page.dart';

class HomePage extends StatelessWidget {
  final User user;

  const HomePage(this.user, {Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final String userUID = user.uid;
    double humidity = 0.0;
    double soilMoisture = 0.0;
    double temperature = 0.0;
    int pumpState = 0;
    int lampState = 0;
    String ip = "";

    return Scaffold(
      appBar: AppBar(
        title: const Text('IoT Smart Farm'),
        actions: <Widget>[
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () async {
              await FirebaseAuth.instance.signOut();
              Navigator.pushAndRemoveUntil(
                context,
                MaterialPageRoute(builder: (context) => const LoginPage()),
                (Route<dynamic> route) => false,
              );
            },
          ),
          ElevatedButton(
            onPressed: () async {
              final snapshot = await FirebaseFirestore.instance
                  .collection('sensor_data')
                  .doc(userUID)
                  .collection('house')
                  .doc('plot')
                  .get();

              if (snapshot.exists) {
                final data = snapshot.data() as Map<String, dynamic>;
                ip = data['ip'] ?? "";

                bool isHttps = ip.toLowerCase().startsWith("http://");
                if (!isHttps) {
                  ip = "http://$ip";
                }

                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => VideoPlayerScreen(videoUrl: ip),
                  ),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('ไม่พบข้อมูล URL ใน Cloud Firestore'),
                  ),
                );
              }
            },
            child: const Text('วิดีโอ'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => ProfilePage(
                    user: user,
                  ),
                ),
              );
            },
            child: const Text('ไปยังโปรไฟล์'),
          )
        ],
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            const SizedBox(height: 20), // เพิ่มระยะห่างด้านบน

            // เริ่มต้นการดึงข้อมูลโรงเรือนและแสดงข้อมูล
            FutureBuilder<String>(
              future: fetchSchoolInfo(userUID),
              builder: (context, schoolInfoSnapshot) {
                if (schoolInfoSnapshot.connectionState ==
                    ConnectionState.waiting) {
                  return CircularProgressIndicator();
                }

                final schoolInfo = schoolInfoSnapshot.data ?? "";

                if (schoolInfo.isNotEmpty) {
                  return Container(
                    margin: const EdgeInsets.all(8.0),
                    padding: const EdgeInsets.all(8.0),
                    decoration: BoxDecoration(
                      border: Border.all(
                        color: const Color.fromARGB(255, 214, 214, 214),
                        width: 2.0,
                      ),
                      borderRadius: BorderRadius.circular(8.0),
                    ),
                    child: Column(
                      children: [
                        Text(
                          'ข้อมูลโรงเรือน:',
                          style: TextStyle(
                            fontSize: 20.0,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        Text(
                          schoolInfo,
                          style: TextStyle(
                            fontSize: 16.0,
                          ),
                        ),
                      ],
                    ),
                  );
                } else {
                  return Container(); // ถ้าไม่มีข้อมูลโรงเรือนให้แสดงช่องว่าง
                }
              },
            ),

            // สิ้นสุดการดึงข้อมูลโรงเรือนและแสดงข้อมูล
            StreamBuilder<DocumentSnapshot>(
              stream: FirebaseFirestore.instance
                  .collection('sensor_data')
                  .doc(userUID)
                  .collection('house')
                  .doc('plot')
                  .snapshots(),
              builder: (context, snapshot) {
                if (snapshot.hasError) {
                  return const Text('ไม่สามารถเชื่อมต่อข้อมูลได้');
                }

                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const CircularProgressIndicator();
                }

                if (snapshot.hasData && snapshot.data!.exists) {
                  final data = snapshot.data!.data() as Map<String, dynamic>;
                  humidity = (data['humidity'] as num?)?.toDouble() ?? 0.0;
                  soilMoisture =
                      (data['soilMoisture'] as num?)?.toDouble() ?? 0.0;
                  temperature =
                      (data['temperature'] as num?)?.toDouble() ?? 0.0;
                  pumpState = (data['pump_state'] as num?)?.toInt() ?? 0;
                  lampState = (data['lamp_state'] as num?)?.toInt() ?? 0;
                }

                return Container(
                  margin: const EdgeInsets.all(8.0),
                  padding: const EdgeInsets.all(8.0),
                  decoration: BoxDecoration(
                    border: Border.all(
                      color: const Color.fromARGB(255, 214, 214, 214),
                      width: 2.0,
                    ),
                    borderRadius: BorderRadius.circular(8.0),
                  ),
                  child: Column(
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: [
                          Expanded(
                            child: buildDataItem(
                              'ความชื้นในอากาศ',
                              '$humidity%',
                              Icons.cloud,
                            ),
                          ),
                          Expanded(
                            child: buildDataItem(
                              'ความชื้นในดิน',
                              '$soilMoisture%',
                              Icons.grass,
                            ),
                          ),
                          Expanded(
                            child: buildDataItem(
                              'อุณหภูมิ',
                              '$temperature°C',
                              Icons.thermostat,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 20),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: [
                          Expanded(
                            child: buildPumpToggleButton(pumpState),
                          ),
                          Expanded(
                            child: buildLampToggleButton(lampState),
                          ),
                        ],
                      ),
                    ],
                  ),
                );
              },
            ),

            // เพิ่มปุ่ม "ดูบันทึก" ที่นี่
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => ViewNotesPage(userUid: userUID),
                  ),
                );
              },
              child: const Text('ดูบันทึก'),
            ),
          ],
        ),
      ),
    );
  }

  Widget buildDataItem(String label, String value, IconData iconData) {
    return Container(
      margin: const EdgeInsets.all(8.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Icon(
            iconData,
            size: 24.0,
            color: Colors.blue,
          ),
          const SizedBox(height: 8.0),
          Text(
            label,
            style: const TextStyle(fontSize: 18.0, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 8.0),
          Text(value, style: const TextStyle(fontSize: 16.0)),
        ],
      ),
    );
  }

  buildPumpToggleButton(int state) {
    return GestureDetector(
      onTap: () {
        int newToggleState = state == 0 ? 1 : 0;

        FirebaseFirestore.instance
            .collection('sensor_data')
            .doc(user.uid)
            .collection('house')
            .doc('plot')
            .update({
          'pump_state': newToggleState,
        }).then((_) {
          print('อัปเดตสถานะปั๊มน้ำสำเร็จ');
        }).catchError((error) {
          print('เกิดข้อผิดพลาดในการอัปเดตปั๊มน้ำ: $error');
        });
      },
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Icon(
            FontAwesomeIcons.water,
            size: 24.0,
            color: state == 1 ? Colors.green : Colors.red,
          ),
          const SizedBox(height: 8.0),
          const Text(
            'ปั๊มน้ำ',
            style: TextStyle(fontSize: 18.0, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 8.0),
          Container(
            width: 100,
            height: 50,
            decoration: BoxDecoration(
              color: state == 1 ? Colors.green : Colors.red,
              borderRadius: BorderRadius.circular(15.0),
            ),
            child: Center(
              child: Text(
                state == 1 ? 'เปิด' : 'ปิด',
                style: const TextStyle(fontSize: 16.0),
              ),
            ),
          ),
        ],
      ),
    );
  }

  buildLampToggleButton(int state) {
    return GestureDetector(
      onTap: () {
        int newToggleState = state == 0 ? 1 : 0;

        FirebaseFirestore.instance
            .collection('sensor_data')
            .doc(user.uid)
            .collection('house')
            .doc('plot')
            .update({
          'lamp_state': newToggleState,
        }).then((_) {
          print('อัปเดตสถานะหลอดไฟสำเร็จ');
        }).catchError((error) {
          print('เกิดข้อผิดพลาดในการอัปเดตหลอดไฟ: $error');
        });
      },
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Icon(
            FontAwesomeIcons.lightbulb,
            size: 24.0,
            color: state == 1 ? Colors.green : Colors.red,
          ),
          const SizedBox(height: 8.0),
          const Text(
            'หลอดไฟ',
            style: TextStyle(fontSize: 18.0, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 8.0),
          Container(
            width: 100,
            height: 50,
            decoration: BoxDecoration(
              color: state == 1 ? Colors.green : Colors.red,
              borderRadius: BorderRadius.circular(15.0),
            ),
            child: Center(
              child: Text(
                state == 1 ? 'เปิด' : 'ปิด',
                style: const TextStyle(fontSize: 16.0),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Future<String> fetchSchoolInfo(String userUID) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(userUID)
          .get();

      if (snapshot.exists) {
        final data = snapshot.data() as Map<String, dynamic>;
        final schoolInfo = data['info'] as String;
        return schoolInfo;
      } else {
        return '';
      }
    } catch (e) {
      print('เกิดข้อผิดพลาดในการดึงข้อมูลโรงเรียน: $e');
      return '';
    }
  }
}

import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:iotapp/house_page.dart'; // Import HousePage

class HomePage extends StatelessWidget {
  final User? user; // ทำให้ user เป็น nullable

  const HomePage(this.user, {Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    if (user == null) {
      // กรณี user เป็น null
      return Scaffold(
        appBar: AppBar(
          title: Text('IoT Smart Farm - Home Page'),
        ),
        body: Center(
          child: Text('ไม่พบข้อมูลผู้ใช้'),
        ),
      );
    }

    final String userUID = user!.uid;

    return Scaffold(
  appBar: AppBar(
    title: Text('IoT Smart Farm - Home Page'),
  ),
  body: StreamBuilder<QuerySnapshot>(
    stream: FirebaseFirestore.instance
        .collection('sensor_data')
        .doc(userUID)
        .collection('house')
        .snapshots(),
    builder: (context, snapshot) {
      if (snapshot.connectionState == ConnectionState.waiting) {
        return CircularProgressIndicator();
      }

      if (snapshot.hasError) {
        return Text('เกิดข้อผิดพลาด: ${snapshot.error}');
      }

      if (snapshot.hasData && snapshot.data!.docs.isNotEmpty) {
        // มี Document ใน Collection ใน Firestore สำหรับผู้ใช้นี้
        // แสดงรายการโรงเรือนทั้งหมด
        return ListView(
          children: snapshot.data!.docs.map((document) {
            final houseName =
                document.id; // ชื่อ Document คือชื่อของโรงเรือน

            // คำนวณหมายเลขของโรงเรือน (houseNumber) จากชื่อ Document
            final houseNumber =
    int.tryParse(houseName.replaceAll('house', '')) ?? 0;


            if (houseNumber != null) {
              // กำหนดค่า houseNumber ได้ถูกแปลงเป็น int สำเร็จ
              return Container(
                margin: EdgeInsets.all(8.0), // เพิ่มระยะห่างขอบ
                padding: EdgeInsets.all(8.0), // เพิ่มระยะห่างภายใน
                decoration: BoxDecoration(
                  border: Border.all(
                    color: Colors.blue, // สีเส้นขอบ
                    width: 2.0, // ความหนาขอบ
                  ),
                  borderRadius: BorderRadius.circular(10.0), // รูปร่างขอบ
                ),
                child: ListTile(
                  title: Text('นี่คือ โรงเรือนที่$houseNumber'),
                  onTap: () {
                    // เมื่อคลิกที่รายการของโรงเรือน
                    // นำ userUID และ houseName ไปยังหน้า HousePage
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => HousePage(
                          user: user!,
                          userUID: userUID,
                          houseName: houseName,
                          houseNumber: houseNumber,
                        ),
                      ),
                    );
                  },
                ),
              );
            } else {
              // ไม่สามารถแปลง houseName เป็น int ได้
              // ดำเนินการตามความต้องการ
              return Container(); // หรือในกรณีอื่น ๆ ที่คุณต้องการ
            }
          }).toList(),
        );
      } else {
        // ไม่มี Document ใน Collection ใน Firestore สำหรับผู้ใช้นี้
        return Text('ไม่มีโรงเรือนใน Firestore');
      }
    },
  ),
);

  }
}
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:iotapp/add_note_page.dart';
import 'package:iotapp/edit_note_page.dart';

class ViewNotesPage extends StatefulWidget {
  final String userUid;

  const ViewNotesPage({Key? key, required this.userUid}) : super(key: key);

  @override
  _ViewNotesPageState createState() => _ViewNotesPageState();
}

class _ViewNotesPageState extends State<ViewNotesPage> {
  String? selectedHouse; // เพิ่มตัวแปรเก็บข้อมูลของโรงเรือนที่เลือก

   @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('บันทึกของคุณ'),
        actions: <Widget>[
          DropdownButton<String>(
            value: selectedHouse,
            onChanged: (String? newValue) {
              setState(() {
                selectedHouse = newValue;
              });
            },
            items: <String>[
              'ทั้งหมด',
              '1',
              '2',
              '3',
              '4',
              '5',
            ].map<DropdownMenuItem<String>>((String value) {
              return DropdownMenuItem<String>(
                value: value,
                child: Text(value),
              );
            }).toList(),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => AddNotePage(
                    userUid: widget.userUid,
                  ),
                ),
              );
            },
            child: const Icon(Icons.add),
          ),
        ],
      ),
      body: StreamBuilder<QuerySnapshot>(
        stream: selectedHouse == null || selectedHouse == 'ทั้งหมด'
            ? FirebaseFirestore.instance
                .collection('user_notes')
                .doc(widget.userUid)
                .collection('notes')
                .orderBy('day', descending: true)
                .snapshots()
            : FirebaseFirestore.instance
                .collection('user_notes')
                .doc(widget.userUid)
                .collection('notes')
                .where('house', isEqualTo: selectedHouse) // ตรวจสอบค่า 'house' ที่ถูกกรอง
                .orderBy('day', descending: true)
                .snapshots(),

        builder: (context, AsyncSnapshot<QuerySnapshot> snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(
              child: CircularProgressIndicator(),
            );
          } else if (snapshot.hasError) {
            return Center(
              child: Text('เกิดข้อผิดพลาด: ${snapshot.error}'),
            );
          } else if (!snapshot.hasData || snapshot.data == null) {
            return Center(
              child: Text('ยังไม่มีบันทึก'),
            );
          }

          final notes = snapshot.data!.docs;

          if (notes.isEmpty) {
            return Center(
              child: Text('ไม่พบบันทึกสำหรับโรงเรือนที่เลือก'),
            );
          }

          return ListView.separated(
            itemCount: notes.length,
            separatorBuilder: (BuildContext context, int index) {
              return const Divider();
            },
            itemBuilder: (BuildContext context, int index) {
              final note = notes[index];
              final day = note['day'];
              final disease = note['disease'];
              final img = note['img']; // URL ของรูปภาพ
              final house = note['house'];
              final plot = note['plot'];
              final temperature = note['temperature'];
              final humidity = note['humidity'];
              final soilMoisture = note['soil_moisture'];

              final formattedDate = (day as Timestamp).toDate();
              final formattedDateString =
                  "${formattedDate.day}/${formattedDate.month}/${formattedDate.year}";

              return Container(
                padding: const EdgeInsets.all(8.0),
                child: Card(
                  color: const Color.fromARGB(255, 126, 120, 120),
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        img.isNotEmpty
                            ? Container(
                                width: 150,
                                height: 150,
                                decoration: BoxDecoration(
                                  image: DecorationImage(
                                    image: NetworkImage(img),
                                    fit: BoxFit.cover,
                                  ),
                                ),
                              )
                            : const SizedBox(),
                        const SizedBox(width: 60.0),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text('วันที่: $formattedDateString'),
                              Text('โรคที่พบ: $disease'),
                              Text('โรงเรือนที่: $house'),
                              Text('แปลงผักที่: $plot'),
                              Text('อุณหภูมิ : $temperature (°C)'),
                              Text('ความชื้น : $humidity (%)'),
                              Text('ความชื้นในดิน : $soilMoisture (%)'),
                            ],
                          ),
                        ),
                        PopupMenuButton<String>(
                          onSelected: (choice) {
                            if (choice == 'edit') {
                              // เรียกฟังก์ชันแก้ไขบันทึก
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => EditNotePage(
                                    userUid: widget.userUid,
                                    noteId: note.id,
                                  ),
                                ),
                              );
                            } else if (choice == 'delete') {
                              // เรียกฟังก์ชันลบบันทึก
                              _deleteNote(note.id);
                            }
                          },
                          itemBuilder: (BuildContext context) {
                            return ['edit', 'delete'].map((String choice) {
                              return PopupMenuItem<String>(
                                value: choice,
                                child: Text(choice == 'edit'
                                    ? 'แก้ไขบันทึก'
                                    : 'ลบบันทึก'),
                              );
                            }).toList();
                          },
                        ),
                      ],
                    ),
                  ),
                ),
              );
            },
          );
        },
      ),
    );
  }

  // ฟังก์ชันลบบันทึก
  Future<void> _deleteNote(String noteId) async {
    try {
      // ลบบันทึกจาก Firestore
      await FirebaseFirestore.instance
          .collection('user_notes')
          .doc(widget.userUid)
          .collection('notes')
          .doc(noteId)
          .delete();

      // แสดงแจ้งเตือนว่าบันทึกถูกลบแล้ว
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('บันทึกถูกลบแล้ว'),
        ),
      );
    } catch (error) {
      // กรณีเกิดข้อผิดพลาดในการลบ
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('เกิดข้อผิดพลาดในการลบบันทึก'),
        ),
      );
    }
  }
}

import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:iotapp/add_note_page.dart';
import 'package:iotapp/edit_note_page.dart';
import 'package:flutter_dropdown/flutter_dropdown.dart';

class ViewNotesPage extends StatefulWidget {
  final String userUid;

  const ViewNotesPage({Key? key, required this.userUid}) : super(key: key);

  @override
  _ViewNotesPageState createState() => _ViewNotesPageState();
}

class _ViewNotesPageState extends State<ViewNotesPage> {
  String? selectedHouse; // เพิ่มตัวแปรเก็บข้อมูลของโรงเรือนที่เลือก

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('บันทึกของคุณ'),
        actions: <Widget>[
          DropdownButton<String>(
            value: selectedHouse,
            onChanged: (String? newValue) {
              setState(() {
                selectedHouse = newValue;
              });
            },
            items: const <DropdownMenuItem<String>>[
              DropdownMenuItem<String>(
                value: '',
                child: Text('ทั้งหมด'),
              ),
              DropdownMenuItem<String>(
                value: '1',
                child: Text('โรงเรือนที่1'),
              ),
              DropdownMenuItem<String>(
                value: '2',
                child: Text('โรงเรือนที่2'),
              ),
              DropdownMenuItem<String>(
                value: '3',
                child: Text('โรงเรือนที่3'),
              ),
              DropdownMenuItem<String>(
                value: '4',
                child: Text('โรงเรือนที่4'),
              ),
              DropdownMenuItem<String>(
                value: '5',
                child: Text('โรงเรือนที่5'),
              ),
            ],
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => AddNotePage(
                    userUid: widget.userUid,
                  ),
                ),
              );
            },
            child: const Icon(Icons.add),
          ),
        ],
      ),
      body: StreamBuilder<QuerySnapshot>(
        stream: selectedHouse == null || selectedHouse == 'ทั้งหมด'
            ? FirebaseFirestore.instance
                .collection('user_notes')
                .doc(widget.userUid)
                .collection('notes')
                .orderBy('day', descending: true)
                .snapshots()
            : FirebaseFirestore.instance
                .collection('user_notes')
                .doc(widget.userUid)
                .collection('notes')
                .where('house',
                    isEqualTo: selectedHouse) // ตรวจสอบค่า 'house' ที่ถูกกรอง
                .orderBy('day', descending: true)
                .snapshots(),
        builder: (context, AsyncSnapshot<QuerySnapshot> snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(
              child: CircularProgressIndicator(),
            );
          } else if (snapshot.hasError) {
            return Center(
              child: Text('เกิดข้อผิดพลาด: ${snapshot.error}'),
            );
          } else if (!snapshot.hasData || snapshot.data == null) {
            return Center(
              child: Text('ยังไม่มีบันทึก'),
            );
          }

          final notes = snapshot.data!.docs;

          if (notes.isEmpty) {
            return Center(
              child: Text('ไม่พบบันทึกสำหรับโรงเรือนที่เลือก'),
            );
          }

          return ListView.separated(
            itemCount: notes.length,
            separatorBuilder: (BuildContext context, int index) {
              return const Divider();
            },
            itemBuilder: (BuildContext context, int index) {
              final note = notes[index];
              final day = note['day'];
              final disease = note['disease'];
              final img = note['img']; // URL ของรูปภาพ
              final house = note['house'];
              final plot = note['plot'];
              final temperature = note['temperature'];
              final humidity = note['humidity'];
              final soilMoisture = note['soil_moisture'];

              final formattedDate = (day as Timestamp).toDate();
              final formattedDateString =
                  "${formattedDate.day}/${formattedDate.month}/${formattedDate.year}";

              return Container(
                padding: const EdgeInsets.all(8.0),
                child: Card(
                  color: const Color.fromARGB(255, 126, 120, 120),
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        img.isNotEmpty
                            ? Container(
                                width: 150,
                                height: 150,
                                decoration: BoxDecoration(
                                  image: DecorationImage(
                                    image: NetworkImage(img),
                                    fit: BoxFit.cover,
                                  ),
                                ),
                              )
                            : const SizedBox(),
                        const SizedBox(width: 60.0),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text('วันที่: $formattedDateString'),
                              Text('โรคที่พบ: $disease'),
                              Text('โรงเรือนที่: $house'),
                              Text('แปลงผักที่: $plot'),
                              Text('อุณหภูมิ : $temperature (°C)'),
                              Text('ความชื้น : $humidity (%)'),
                              Text('ความชื้นในดิน : $soilMoisture (%)'),
                            ],
                          ),
                        ),
                        PopupMenuButton<String>(
                          onSelected: (choice) {
                            if (choice == 'edit') {
                              // เรียกฟังก์ชันแก้ไขบันทึก
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => EditNotePage(
                                    userUid: widget.userUid,
                                    noteId: note.id,
                                  ),
                                ),
                              );
                            } else if (choice == 'delete') {
                              // เรียกฟังก์ชันลบบันทึก
                              _deleteNote(note.id);
                            }
                          },
                          itemBuilder: (BuildContext context) {
                            return ['edit', 'delete'].map((String choice) {
                              return PopupMenuItem<String>(
                                value: choice,
                                child: Text(choice == 'edit'
                                    ? 'แก้ไขบันทึก'
                                    : 'ลบบันทึก'),
                              );
                            }).toList();
                          },
                        ),
                      ],
                    ),
                  ),
                ),
              );
            },
          );
        },
      ),
    );
  }

  // ฟังก์ชันลบบันทึก
  Future<void> _deleteNote(String noteId) async {
    try {
      // ลบบันทึกจาก Firestore
      await FirebaseFirestore.instance
          .collection('user_notes')
          .doc(widget.userUid)
          .collection('notes')
          .doc(noteId)
          .delete();

      // แสดงแจ้งเตือนว่าบันทึกถูกลบแล้ว
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('บันทึกถูกลบแล้ว'),
        ),
      );
    } catch (error) {
      // กรณีเกิดข้อผิดพลาดในการลบ
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('เกิดข้อผิดพลาดในการลบบันทึก'),
        ),
      );
    }
  }
}
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:syncfusion_flutter_charts/charts.dart';

class ChartPage extends StatelessWidget {
  final String houseName;
  final User? user;

  const ChartPage({Key? key, required this.houseName, this.user});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Sensor Data Chart for $houseName'),
      ),
      body: StreamBuilder<QuerySnapshot>(
        stream: FirebaseFirestore.instance
            .collection('users')
            .doc(user?.uid)
            .collection(houseName)
            .snapshots(),
        builder: (context, snapshot) {
          if (snapshot.hasError) {
            return Text('เกิดข้อผิดพลาด: ${snapshot.error}');
          }

          if (snapshot.connectionState == ConnectionState.waiting) {
            return CircularProgressIndicator();
          }

          if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
            return Text('ไม่พบข้อมูลเซ็นเซอร์');
          }

          final sensorData = snapshot.data!.docs;

          final List<ChartData> chartData = sensorData.map((data) {
            final humidity = (data['humidity'] as num).toDouble();
            final temperature = (data['temperature'] as num).toDouble();
            final soilMoisture = (data['soilMoisture'] as num).toDouble();
            final timestamp = data.id;

            return ChartData(
              timestamp: timestamp,
              humidity: humidity,
              temperature: temperature,
              soilMoisture: soilMoisture,
            );
          }).toList();

          return Container(
            margin: EdgeInsets.all(8.0),
            height: 300,
            width: 500,
            child: SfCartesianChart(
              primaryXAxis: CategoryAxis(),
              primaryYAxis: NumericAxis(),
              tooltipBehavior: TooltipBehavior(
                enable: true, // เปิดใช้งาน Tooltip
              ),
              series: <ChartSeries>[
                LineSeries<ChartData, String>(
                  name: 'Humidity',
                  dataSource: chartData,
                  xValueMapper: (data, _) => data.timestamp,
                  yValueMapper: (data, _) => data.humidity,
                  width: 2,
                  color: Colors.blue,
                ),
                LineSeries<ChartData, String>(
                  name: 'Temperature',
                  dataSource: chartData,
                  xValueMapper: (data, _) => data.timestamp,
                  yValueMapper: (data, _) => data.temperature,
                  width: 2,
                  color: Colors.green,
                ),
                LineSeries<ChartData, String>(
                  name: 'Soil Moisture',
                  dataSource: chartData,
                  xValueMapper: (data, _) => data.timestamp,
                  yValueMapper: (data, _) => data.soilMoisture,
                  width: 2,
                  color: Colors.orange,
                ),
              ],
              legend: Legend(
                isVisible: true,
                position: LegendPosition.bottom,
                textStyle: TextStyle(fontSize: 12),
                overflowMode: LegendItemOverflowMode.wrap,
              ),
            ),
          );
        },
      ),
    );
  }
}

class ChartData {
  final String timestamp;
  final double humidity;
  final double temperature;
  final double soilMoisture;

  ChartData({
    required this.timestamp,
    required this.humidity,
    required this.temperature,
    required this.soilMoisture,
  });
}
