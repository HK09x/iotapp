import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:io';
import 'package:image_picker/image_picker.dart';

class AddNotePage extends StatefulWidget {
  @override
  _AddNotePageState createState() => _AddNotePageState();
}

class _AddNotePageState extends State<AddNotePage> {
  final TextEditingController _diseaseController = TextEditingController();
  final TextEditingController _houseController = TextEditingController();
  final TextEditingController _plotController = TextEditingController();
  final TextEditingController _temperatureController = TextEditingController();
  final TextEditingController _humidityController = TextEditingController();
  final TextEditingController _soilMoistureController = TextEditingController();
  File? pickedImage;

  DateTime? selectedDate; // เพิ่มตัวแปรเก็บวันที่ที่เลือก

  void _addNote() {
    final String day = selectedDate != null ? selectedDate.toString() : '';
    final String disease = _diseaseController.text.trim();
    final String house = _houseController.text.trim();
    final String plot = _plotController.text.trim();
    final String temperature = _temperatureController.text.trim();
    final String humidity = _humidityController.text.trim();
    final String soil_moisture = _soilMoistureController.text.trim();
    if (day.isNotEmpty &&
        disease.isNotEmpty &&
        house.isNotEmpty &&
        plot.isNotEmpty &&
        temperature.isNotEmpty &&
        humidity.isNotEmpty &&
        soil_moisture.isNotEmpty) {
      FirebaseFirestore.instance
          .collection('user_notes')
          .doc('YOUR_USER_UID')
          .collection('notes')
          .add({
        'day': day,
        'disease': disease,
        'img': pickedImage != null ? pickedImage!.path : '',
        'house': house,
        'plot': plot,
        'temperature': temperature,
        'humidity': humidity,
        'soil_moisture': soil_moisture,
      }).then((_) {
        Navigator.pop(context);
      }).catchError((error) {
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: Text('Error'),
              content: Text('An error occurred while adding the note.'),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: Text('OK'),
                ),
              ],
            );
          },
        );
      });
    }
  }

  Future<void> _pickImage() async {
    final pickedFile =
        await ImagePicker().pickImage(source: ImageSource.gallery);

    if (pickedFile != null) {
      setState(() {
        pickedImage = File(pickedFile.path);
      });
    }
  }

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: selectedDate ?? DateTime.now(),
      firstDate: DateTime(2000),
      lastDate: DateTime(2101),
    );

    if (picked != null) {
      setState(() {
        selectedDate = picked;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('บันทึกรายวัน'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            children: [
              ListTile(
                title: Text('ช่วงเวลา'),
                subtitle: Text(selectedDate != null
                    ? "${selectedDate!.toLocal()}".split(' ')[0]
                    : 'เลือกวันที่'),
                trailing: Icon(Icons.keyboard_arrow_down),
                onTap: () {
                  _selectDate(context);
                },
              ),
              TextField(
                controller: _diseaseController,
                decoration: InputDecoration(labelText: 'โรคที่พบ'),
              ),
              if (pickedImage != null) Image.file(pickedImage!),
              ElevatedButton(
                onPressed: () async {
                  final action = await _showImageSourceSelectionDialog();
                  if (action == 'Gallery') {
                    _pickImage();
                  } else if (action == 'Camera') {
                    _takePicture();
                  }
                },
                child: Text('เลือกรูปภาพหรือถ่ายภาพ'),
              ),
              TextField(
                controller: _houseController,
                decoration: InputDecoration(labelText: 'โรงเรือนที่'),
              ),
              TextField(
                controller: _plotController,
                decoration: InputDecoration(labelText: 'แปลงผักที่'),
              ),
              TextField(
                controller: _temperatureController,
                decoration: InputDecoration(labelText: 'อุณหภูมิ (°C)'),
              ),
              TextField(
                controller: _humidityController,
                decoration: InputDecoration(labelText: 'ความชื้น (%)'),
              ),
              TextField(
                controller: _soilMoistureController,
                decoration: InputDecoration(labelText: 'ความชื้นในดิน (%)'),
              ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: _addNote,
                child: Text('บันทึก'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Future<String?> _showImageSourceSelectionDialog() async {
    return showDialog<String>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('เลือกแหล่งที่มาของภาพ'),
          content: SingleChildScrollView(
            child: ListBody(
              children: <Widget>[
                GestureDetector(
                  onTap: () {
                    Navigator.of(context).pop('Gallery');
                  },
                  child: ListTile(
                    leading: Icon(Icons.photo),
                    title: Text('เลือกจากแกลเลอรี่'),
                  ),
                ),
                GestureDetector(
                  onTap: () {
                    Navigator.of(context).pop('Camera');
                  },
                  child: ListTile(
                    leading: Icon(Icons.camera),
                    title: Text('กล้อง'),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Future<void> _takePicture() async {
    final pickedFile =
        await ImagePicker().pickImage(source: ImageSource.camera);

    if (pickedFile != null) {
      setState(() {
        pickedImage = File(pickedFile.path);
      });
    }
  }
}
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:iotapp/main.dart';

class SignUpPage extends StatefulWidget {
  final VoidCallback callToSignIn;
  const SignUpPage({
    Key? key,
    required this.callToSignIn, required Null Function() callToSingIn, required Null Function() callToSignInFunction,
  }) : super(key: key);

  @override
  _SignUpPageState createState() => _SignUpPageState();
}

class _SignUpPageState extends State<SignUpPage> {
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _password2Controller = TextEditingController();
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _phoneNumberController = TextEditingController();
  String _errorMessage = '';

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    _password2Controller.dispose();
    _nameController.dispose();
    _phoneNumberController.dispose();
    super.dispose();
  }

  Future<void> _handleSignUp() async {
    if (_passwordController.text == _password2Controller.text &&
        _emailController.text.isNotEmpty &&
        _passwordController.text.isNotEmpty) {
      try {
        final UserCredential userCredential =
            await FirebaseAuth.instance.createUserWithEmailAndPassword(
          email: _emailController.text,
          password: _passwordController.text,
        );

        final User user = userCredential.user!;
        final String uid = user.uid;
        final String fullName = _nameController.text;

        await FirebaseFirestore.instance.collection('users').doc(uid).set({
          'IDusers': uid,
          'Full Name': fullName,
          'Phone Number': _phoneNumberController.text,
        });

        // ลงทะเบียนสำเร็จ นำผู้ใช้ไปยังหน้า Login
        Navigator.of(context).pushReplacement(MaterialPageRoute(
          builder: (context) => LoginPage(),
        ));
      } catch (error) {
        setState(() {
          _errorMessage = 'เกิดข้อผิดพลาดในการสมัครสมาชิก: $error';
        });
      }
    } else {
      setState(() {
        _errorMessage = 'รหัสผ่านไม่ตรงกัน หรือ อีเมลหรือรหัสผ่านว่างเปล่า';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('ลงทะเบียน'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            const Text(
              'SignUp',
              style: TextStyle(
                fontSize: 40,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _emailController,
              decoration: const InputDecoration(
                labelText: 'อีเมล',
                labelStyle: TextStyle(
                  fontFamily: 'Montserrat',
                  fontWeight: FontWeight.bold,
                  color: Colors.grey,
                ),
                focusedBorder: UnderlineInputBorder(
                  borderSide: BorderSide(color: Colors.green),
                ),
              ),
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _nameController,
              decoration: const InputDecoration(labelText: 'ชื่อและนามสกุล'),
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _phoneNumberController,
              decoration: const InputDecoration(labelText: 'เบอร์โทร'),
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _passwordController,
              decoration: const InputDecoration(labelText: 'รหัสผ่าน'),
              obscureText: true,
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _password2Controller,
              decoration: const InputDecoration(labelText: 'ยืนยันรหัสผ่าน'),
              obscureText: true,
            ),
            const SizedBox(height: 10),
            ElevatedButton(
              onPressed: _handleSignUp,
              child: const Text(
                'ลงทะเบียน',
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontFamily: 'Montserrat',
                ),
              ),
            ),
            const SizedBox(height: 10),
            Text(
              _errorMessage,
              style: TextStyle(
                color: Colors.red,
                fontSize: 16.0,
              ),
            ),
            const SizedBox(height: 10),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                InkWell(
                  onTap: () {
                    Navigator.of(context).pop();
                  },
                  child: const Text(
                    'กลับ',
                    style: TextStyle(
                      color: Colors.blueGrey,
                      fontFamily: 'Montserrat',
                      fontWeight: FontWeight.bold,
                      decoration: TextDecoration.underline,
                    ),
                  ),
                )
              ],
            )
          ],
        ),
      ),
    );
  }
}

import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

class SignUpPage extends StatefulWidget {
  final VoidCallback callToSignIn;
  const SignUpPage(
      {Key? key,
      required this.callToSignIn,
      required Null Function() callToSingIn})
      : super(key: key);

  @override
  _SignUpPageState createState() => _SignUpPageState();
}

class _SignUpPageState extends State<SignUpPage> {
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _password2Controller = TextEditingController();

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    _password2Controller.dispose();
    super.dispose();
  }

  Future<void> _handleSignUp() async {
    if (_passwordController.text == _password2Controller.text) {
      try {
        final UserCredential userCredential =
            await FirebaseAuth.instance.createUserWithEmailAndPassword(
          email: _emailController.text,
          password: _passwordController.text,
        );

        final User user = userCredential.user!;
        final String uid = user.uid;

        // สร้างเอกสารบน Cloud Firestore ในคอลเลคชัน "users" ด้วย UID ของผู้ใช้ใน Field "IDusers"
        await FirebaseFirestore.instance.collection('users').doc(uid).set({
          'IDusers': uid,
          // สามารถเพิ่มข้อมูลเพิ่มเติมของผู้ใช้ตามความต้องการได้
        });

        // สมัครสมาชิกสำเร็จ คุณสามารถดำเนินการต่อได้ตามต้องการ
        widget.callToSignIn();
      } catch (error) {
        // จัดการข้อผิดพลาดที่เกิดขึ้นในกรณีที่สมัครสมาชิกไม่สำเร็จ
        print('เกิดข้อผิดพลาดในการสมัครสมาชิก: $error');
      }
    } else {
      // Passwords do not match
      print('รหัสผ่านไม่ตรงกัน');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('ลงทะเบียน'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            const Text(
              'SignUp',
              style: TextStyle(
                fontSize: 40,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _emailController,
              decoration: const InputDecoration(
                labelText: 'อีเมล',
                labelStyle: TextStyle(
                  fontFamily: 'Montserrat',
                  fontWeight: FontWeight.bold,
                  color: Colors.grey,
                ),
                focusedBorder: UnderlineInputBorder(
                  borderSide: BorderSide(color: Colors.green),
                ),
              ),
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _passwordController,
              decoration: const InputDecoration(labelText: 'รหัสผ่าน'),
              obscureText: true,
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _password2Controller,
              decoration: const InputDecoration(labelText: 'ยืนยันรหัสผ่าน'),
              obscureText: true,
            ),
            const SizedBox(height: 10),
            ElevatedButton(
              onPressed: _handleSignUp,
              child: const Text(
                'ลงทะเบียน',
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontFamily: 'Montserrat',
                ),
              ),
            ),
            const SizedBox(height: 10),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                InkWell(
                  onTap: () {
                    // กลับไปหน้าล็อกอิน
                    Navigator.of(context).pop();
                  },
                  child: const Text(
                    'กลับ',
                    style: TextStyle(
                      color: Colors.blueGrey,
                      fontFamily: 'Montserrat',
                      fontWeight: FontWeight.bold,
                      decoration: TextDecoration.underline,
                    ),
                  ),
                )
              ],
            )
          ],
        ),
      ),
    );
  }
}
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class ProfilePage extends StatefulWidget {
  final User user;

  ProfilePage({
    required this.user,
    required String fullName,
    required String phoneNumber,
    required String email,
  });

  @override
  _ProfilePageState createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  final ImagePicker _imagePicker = ImagePicker();
  String? _imageUrl;

  Future<void> _uploadImage() async {
    final action = await _showImageSourceSelectionDialog();
    if (action == 'Gallery') {
      _pickImage();
    } else if (action == 'Camera') {
      _takePicture();
    }
  }

  Future<String?> _showImageSourceSelectionDialog() async {
    return showDialog<String>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Choose Image Source'),
          content: SingleChildScrollView(
            child: ListBody(
              children: <Widget>[
                GestureDetector(
                  onTap: () {
                    Navigator.of(context).pop('Gallery');
                  },
                  child: const ListTile(
                    leading: Icon(Icons.photo),
                    title: Text('Choose from Gallery'),
                  ),
                ),
                GestureDetector(
                  onTap: () {
                    Navigator.of(context).pop('Camera');
                  },
                  child: const ListTile(
                    leading: Icon(Icons.camera),
                    title: Text('Take a Photo'),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Future<void> _pickImage() async {
    final pickedFile = await _imagePicker.pickImage(source: ImageSource.gallery);

    if (pickedFile != null) {
      final file = File(pickedFile.path);
      final userId = widget.user.uid;
      final Reference storageRef =
          FirebaseStorage.instance.ref().child('profile_images/$userId.jpg');

      await storageRef.putFile(file);

      final imageUrl = await storageRef.getDownloadURL();
      setState(() {
        _imageUrl = imageUrl;
      });

      // Update the user's profile image URL in Firestore
      await FirebaseFirestore.instance.collection('users').doc(userId).update({
        'profileImageUrl': imageUrl,
      });
    }
  }

  Future<void> _takePicture() async {
    final pickedFile = await _imagePicker.pickImage(source: ImageSource.camera);

    if (pickedFile != null) {
      final file = File(pickedFile.path);
      final userId = widget.user.uid;
      final Reference storageRef =
          FirebaseStorage.instance.ref().child('profile_images/$userId.jpg');

      await storageRef.putFile(file);

      final imageUrl = await storageRef.getDownloadURL();
      setState(() {
        _imageUrl = imageUrl;
      });

      // Update the user's profile image URL in Firestore
      await FirebaseFirestore.instance.collection('users').doc(userId).update({
        'profileImageUrl': imageUrl,
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Your Profile'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            GestureDetector(
              onTap: _uploadImage,
              child: _imageUrl != null
                  ? Image.network(_imageUrl!, width: 200, height: 200)
                  : Container(
                      width: 200,
                      height: 200,
                      color: Colors.grey,
                      child: Icon(
                        Icons.camera_alt,
                        color: Colors.white,
                        size: 80,
                      ),
                    ),
            ),
            const SizedBox(height: 16),
            Text(
              'Tap the image to change your profile picture',
              style: TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 16),
            Text('Name: ${widget.user.displayName ?? ''}', style: TextStyle(fontSize: 20)),
            Text('Email: ${widget.user.email ?? ''}', style: TextStyle(fontSize: 20)),
          ],
        ),
      ),
    );
  }
}
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:iotapp/edit_profile_page.dart';

class ProfilePage extends StatefulWidget {
  final User? user;
  final String fullName;
  final String phoneNumber;
  final String email;

  const ProfilePage({
    Key? key,
    required this.user,
    required this.fullName,
    required this.phoneNumber,
    required this.email,
  }) : super(key: key);

  @override
  _ProfilePageState createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('โปรไฟล์'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Text(
              'ข้อมูลของผู้ใช้',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 20),
            Text(
              'อีเมล: ${widget.user?.email}',
              style: const TextStyle(fontSize: 16),
            ),
            Text(
              'ชื่อ: ${widget.fullName}',
              style: const TextStyle(fontSize: 16),
            ),
            Text(
              'เบอร์โทรศัพท์: ${widget.phoneNumber ?? 'ไม่มี'}',
              style: const TextStyle(fontSize: 16),
            ),
            Text(
              'UID: ${widget.user?.uid}',
              style: const TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 20),
            FutureBuilder<DocumentSnapshot>(
              future: FirebaseFirestore.instance
                  .collection('users')
                  .doc(widget.user?.uid)
                  .get(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return CircularProgressIndicator();
                }
                if (snapshot.hasError) {
                  return Text('เกิดข้อผิดพลาด: ${snapshot.error}');
                }

                final data = snapshot.data;
                final img = data?['img'] as String? ?? '';

                return img.isNotEmpty
                    ? Image.network(
                        img,
                        width: 150,
                        height: 150,
                        fit: BoxFit.cover,
                      )
                    : const SizedBox.shrink();
              },
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => EditProfilePage(
                      user: widget.user,
                      userProfile: {
                        'Full_Name': widget.fullName,
                        'Phone_Number': widget.phoneNumber,
                        'Email': widget.email,
                      },
                    ),
                  ),
                ).then((updatedProfile) {
                  if (updatedProfile != null) {
                    setState(() {
                      widget.fullName = updatedProfile['Full_Name'] ?? '';
                      widget.phoneNumber = updatedProfile['Phone_Number'] ?? '';
                      widget.email = updatedProfile['Email'] ?? '';
                    });
                  }
                });
              },
              child: const Text('แก้ไขโปรไฟล์'),
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:iotapp/edit_profile_page.dart';

class ProfilePage extends StatefulWidget {
  final User? user;

  ProfilePage({required this.user});

  @override
  _ProfilePageState createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  String fullName = '';
  String phoneNumber = '';
  String email = '';
  String img = '';

  @override
  void initState() {
    super.initState();

    fetchProfileData(widget.user).then((data) {
      setState(() {
        fullName = data['Full_Name'] ?? '';
        phoneNumber = data['Phone_Number'] ?? '';
        email = data['Email'] ?? '';
        img = data['img'] ?? '';
      });
    });
  }

  Future<Map<String, dynamic>> fetchProfileData(User? user) async {
    final DocumentSnapshot snapshot = await FirebaseFirestore.instance
        .collection('users')
        .doc(user?.uid)
        .get();

    if (snapshot.exists) {
      final data = snapshot.data() as Map<String, dynamic>;
      return data;
    } else {
      return {};
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('โปรไฟล์'),
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: <Widget>[
              img.isNotEmpty
                  ? CircleAvatar(
                      radius: 75,
                      backgroundImage: NetworkImage(img),
                    )
                  : SizedBox.shrink(),
              SizedBox(height: 20),
              Text(
                'ชื่อ: $fullName',
                style: TextStyle(fontSize: 18),
              ),
              SizedBox(height: 20),
              Text(
                'อีเมล: ${widget.user?.email}',
                style: TextStyle(fontSize: 18),
              ),
              SizedBox(height: 20),
              Text(
                'เบอร์โทรศัพท์: ${phoneNumber ?? 'ไม่มี'}',
                style: TextStyle(fontSize: 18),
              ),
              SizedBox(height: 20),
              Text(
                'UID: ${widget.user?.uid}',
                style: TextStyle(fontSize: 18),
              ),
              SizedBox(height: 20),
              ElevatedButton.icon(
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => EditProfilePage(
                        userProfile: {
                          'Full_Name': fullName,
                          'Phone_Number': phoneNumber,
                          'Email': email,
                          'img': img,
                        },
                        user: widget.user,
                      ),
                    ),
                  ).then((updatedProfile) {
                    if (updatedProfile != null) {
                      setState(() {
                        fullName = updatedProfile['Full_Name'] ?? '';
                        phoneNumber = updatedProfile['Phone_Number'] ?? '';
                        email = updatedProfile['Email'] ?? '';
                        img = updatedProfile['img'] ?? '';
                      });
                    }
                  });
                },
                icon: Icon(
                  Icons.edit,
                  size: 24.0,
                ),
                label: Text('แก้ไขโปรไฟล์'),
                style: ElevatedButton.styleFrom(
                  primary: Colors.blue,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
